"""
Database models for memory system
Memory nodes with embeddings, emotions (Valence-Arousal), and timestamps
"""

from sqlalchemy import Column, Integer, String, Float, DateTime, Text, ForeignKey, Index
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.postgresql import UUID, ARRAY
from pgvector.sqlalchemy import Vector
import uuid
from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel

from app.core.config import settings

Base = declarative_base()


class MemoryNode(Base):
    """
    Memory node with embedding + emotions (Valence-Arousal) + timestamp
    Based on Memory-Augmented GNNs design
    """
    __tablename__ = "memory_nodes"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    content = Column(Text, nullable=False)  # Original text content
    
    # Embedding vector (384-dim for sentence-BERT)
    embedding = Column(Vector(settings.VECTOR_DIMENSION), nullable=False)
    
    # Emotion coordinates (Valence-Arousal model)
    valence = Column(Float, nullable=False, default=0.0)  # -1 to 1 (negative to positive)
    arousal = Column(Float, nullable=False, default=0.0)  # -1 to 1 (calm to excited)
    
    # Time information
    created_at = Column(DateTime, default=datetime.utcnow)
    last_accessed = Column(DateTime, default=datetime.utcnow)
    
    # Memory strength and activation
    activation_strength = Column(Float, default=1.0)  # 0 to 1
    access_count = Column(Integer, default=0)
    
    # Memory type and category
    memory_type = Column(String(50), default="episodic")  # episodic, semantic, procedural
    category = Column(String(100), nullable=True)
    
    # GRU hidden state for internal memory (serialized as array)
    gru_state = Column(ARRAY(Float), nullable=True)
    
    # Relationships
    source_edges = relationship("MemoryEdge", foreign_keys="MemoryEdge.source_id", back_populates="source")
    target_edges = relationship("MemoryEdge", foreign_keys="MemoryEdge.target_id", back_populates="target")
    
    # Indexes for efficient querying
    __table_args__ = (
        Index("ix_memory_nodes_embedding", "embedding", postgresql_using="ivfflat"),
        Index("ix_memory_nodes_valence", "valence"),
        Index("ix_memory_nodes_arousal", "arousal"),
        Index("ix_memory_nodes_created_at", "created_at"),
        Index("ix_memory_nodes_activation", "activation_strength"),
    )


class MemoryEdge(Base):
    """
    Relationships between memory nodes
    Represents similarity, causality, and emotional connections
    """
    __tablename__ = "memory_edges"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    source_id = Column(UUID(as_uuid=True), ForeignKey("memory_nodes.id"), nullable=False)
    target_id = Column(UUID(as_uuid=True), ForeignKey("memory_nodes.id"), nullable=False)
    
    # Edge types
    edge_type = Column(String(50), nullable=False)  # similarity, causal, emotional, temporal
    
    # Connection strength
    weight = Column(Float, nullable=False, default=0.5)  # 0 to 1
    
    # Additional properties
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Relationships
    source = relationship("MemoryNode", foreign_keys=[source_id], back_populates="source_edges")
    target = relationship("MemoryNode", foreign_keys=[target_id], back_populates="target_edges")
    
    # Indexes
    __table_args__ = (
        Index("ix_memory_edges_source", "source_id"),
        Index("ix_memory_edges_target", "target_id"),
        Index("ix_memory_edges_type", "edge_type"),
        Index("ix_memory_edges_weight", "weight"),
    )


class ConversationHistory(Base):
    """
    Conversation history for context tracking
    """
    __tablename__ = "conversation_history"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    session_id = Column(String(100), nullable=False)
    
    user_input = Column(Text, nullable=False)
    system_response = Column(Text, nullable=False)
    
    # Associated memory nodes
    activated_memories = Column(ARRAY(String), nullable=True)  # UUIDs as strings
    
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Indexes
    __table_args__ = (
        Index("ix_conversation_session", "session_id"),
        Index("ix_conversation_created", "created_at"),
    )


class DailyReport(Base):
    """
    Daily reports generated by KanaRe-1.1
    """
    __tablename__ = "daily_reports"
    
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)
    date = Column(DateTime, nullable=False)
    
    summary = Column(Text, nullable=False)
    key_memories = Column(ARRAY(String), nullable=True)  # Memory node UUIDs
    emotional_state = Column(String(100), nullable=True)
    
    created_at = Column(DateTime, default=datetime.utcnow)
    
    # Indexes
    __table_args__ = (
        Index("ix_daily_reports_date", "date"),
        Index("ix_daily_reports_created", "created_at"),
    )


# Pydantic models for API
class MemoryNodeCreate(BaseModel):
    content: str
    memory_type: str = "episodic"
    category: Optional[str] = None
    valence: float = 0.0
    arousal: float = 0.0


class MemoryNodeResponse(BaseModel):
    id: str
    content: str
    memory_type: str
    category: Optional[str]
    valence: float
    arousal: float
    activation_strength: float
    access_count: int
    created_at: datetime
    last_accessed: datetime
    
    class Config:
        from_attributes = True


class MemoryEdgeCreate(BaseModel):
    source_id: str
    target_id: str
    edge_type: str
    weight: float = 0.5


class ConversationRequest(BaseModel):
    message: str
    session_id: str


class ConversationResponse(BaseModel):
    response: str
    session_id: str
    activated_memories: List[str]
